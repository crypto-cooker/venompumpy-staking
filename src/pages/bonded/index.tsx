import GraButton from "@/components/common/Buttons";
import Image from "next/image";
import React, { useState, useEffect, useCallback } from "react";
import Button from "@mui/material/Button";
import Dialog from "@mui/material/Dialog";
import DialogActions from "@mui/material/DialogActions";
import DialogContent from "@mui/material/DialogContent";
import DialogContentText from "@mui/material/DialogContentText";
import DialogTitle from "@mui/material/DialogTitle";
import TextField from "@mui/material/TextField";
import InputAdornment from "@mui/material/InputAdornment";
import BondCards from "@/components/page/bonded/bondCards";
import { ethers } from "ethers";
import { useWeb3Context } from "@/context/Web3Context";
import Head from "next/head";

const Bonded = () => {
  const [tenBondPrice, setTenBondPrice] = useState<string>(null);
  const [tenBondTotal, setTenBondTotal] = useState<string>(null);
  const [twentyBondPrice, setTwentyBondPrice] = useState<string>(null);
  const [twentyBondTotal, setTwentyBondTotal] = useState<string>(null);
  const [bondList, setBondList] = useState([]);
  const [length, setLength] = useState<number>(0);
  const [flag, setFlag] = useState<boolean>(false);
  const [openBondSuccess, setOpenBondSuccess] = React.useState(false);

  const {
    provider,
    web3Provider,
    address,
    network,
    yzContract,
    byzContract,
    sContract,
  } = useWeb3Context();

  const handleClose = () => {
    setOpenBondSuccess(false);
  };

  const getPrice = useCallback(async () => {
    const [tenBondPrice, tenBondTotal, twentyBondPrice, twentyBondTotal] =
      await Promise.all([
        await yzContract.tenBondPrice(),
        await yzContract.tenBondTotal(),
        await yzContract.twentyBondPrice(),
        await yzContract.twentyBondTotal(),
      ]);

    setTenBondPrice(ethers.utils.formatUnits(tenBondPrice));
    setTenBondTotal(ethers.utils.formatUnits(tenBondTotal));
    setTwentyBondPrice(ethers.utils.formatUnits(twentyBondPrice));
    setTwentyBondTotal(ethers.utils.formatUnits(twentyBondTotal));
  }, []);

  const display = async () => {
    let tmpList = [],
      index = 0;
    for (index = 0; ; index++) {
      try {
        const bondItem = await yzContract.userBond(address, index);
        // console.log(bondItem)
        tmpList.push(bondItem);
      } catch (error) {
        console.error("Transaction failed with error:", error);
        // console.log(index);
        break;
      }
    }
    setBondList(tmpList);
    setLength(index);
  };

  const purchase = async (amount, period) => {
    amount = ethers.utils.parseEther(amount);
    const treasury = await yzContract.treasury();
    try {
      const tx = await yzContract.createBond(period, { value: amount });
      await tx.wait();
      setOpenBondSuccess(true);
    } catch (error) {
      console.log(error);
    }
  };

  useEffect(() => {
    getPrice();
  }, []);

  return (
    <>
      <Head>
        <title>Bond</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/logo.svg" />
      </Head>
      <div className="flex justify-center max-w-[1200px] m-auto mt-[55px] pb-[40px]">
        <div className="flex justify-center align-middle border-[1px] bg-[#1C1C1C]/[.6]  border-white/10 backdrop-blur-md rounded-2xl lg:w-[100%] pb-[20px]">
          <div className="py-[15px] px-[30px]">
            {/* Page title */}
            <h2 className="text-white text-[32px] font-bold">Bonding</h2>
            <h6 className="text-[#898CA9] text-[16px] font-normal">
              Contribute to the development of ecosystem. Bond your stable
              assets now and get instantly boosted YZ tokens below the real
              value!
            </h6>
            <div></div>
            <div className="flex flex-wrap max-[1462px]:justify-center">
              <div className="px-[21px] border-[1px] rounded-lg bg-white/5  border-white/10 m-[15px] h-[350px] relative min-w-[300px]">
                <div className="flex max-[1075px]:m-auto">
                  <Image
                    src="./icon/tethericon.svg"
                    className="ml-[-30px] mt-0"
                    width={160}
                    height={190}
                    alt="ether"
                  />
                  <div className="table-row">
                    <h2 className="mb-[10px] bg-white/5 border-[1px] border-white/10 rounded-[30px] px-[30px] ml-[-10px] flex text-[20px] justify-center text-[#47fd80] font-bold text-center leading-10 mt-[40px]">
                      10 Days
                    </h2>
                    <p
                      className="text-[18px] bg-[linear-gradient(180deg,#47FD80_0%,#FFFFFF_100%)] bg-clip-text font-black"
                      style={{ WebkitTextFillColor: "transparent" }}
                    >
                      Total Price
                    </p>
                    <p className="text-[24px] font-bold">
                      {tenBondTotal == null ? "" : `${tenBondTotal} CORE`}
                    </p>
                    <p
                      className="text-[18px] bg-[linear-gradient(180deg,#47FD80_0%,#FFFFFF_100%)] bg-clip-text font-black"
                      style={{ WebkitTextFillColor: "transparent" }}
                    >
                      YZ Price
                    </p>
                    <p className="text-[24px] font-bold">
                      {tenBondPrice == null ? "" : `${tenBondPrice} CORE`}
                    </p>
                  </div>
                </div>
                <div className="flex justify-center">
                  <GraButton
                    className="text-[18px] mt-[40px] px-[40px] py-[5px] font-bold"
                    onClick={() => purchase(tenBondTotal, 10)}
                    disabled={!web3Provider}
                  >
                    Purchase
                  </GraButton>
                </div>
              </div>
              <div className="px-[21px] border-[1px] rounded-lg bg-white/5  border-white/10 m-[15px] h-[350px] relative min-w-[300px]">
                <div className="flex max-[1075px]:m-auto">
                  <Image
                    src="./icon/tethericon.svg"
                    className="ml-[-30px] mt-6"
                    width={146}
                    height={145}
                    alt="ether"
                  />
                  <div className="table-row">
                    <h2 className="mb-[10px] bg-white/5 border-[1px] border-white/10 rounded-[30px] px-[30px] ml-[-10px] flex text-[20px] justify-center text-[#47fd80] font-bold text-center leading-10 mt-[40px]">
                      20 Days
                    </h2>
                    <p
                      className="text-[18px] bg-[linear-gradient(180deg,#47FD80_0%,#FFFFFF_100%)] bg-clip-text font-black"
                      style={{ WebkitTextFillColor: "transparent" }}
                    >
                      Total Price
                    </p>
                    <p className="text-[24px] font-bold">
                      {twentyBondTotal == null ? "" : `${twentyBondTotal} CORE`}
                    </p>
                    <p
                      className="text-[18px] bg-[linear-gradient(180deg,#47FD80_0%,#FFFFFF_100%)] bg-clip-text font-black"
                      style={{ WebkitTextFillColor: "transparent" }}
                    >
                      YZ Price
                    </p>
                    <p className="text-[24px] font-bold">
                      {twentyBondPrice == null ? "" : `${twentyBondPrice} CORE`}
                    </p>
                  </div>
                </div>
                <div className="flex justify-center">
                  <GraButton
                    className="text-[18px] mt-[40px] px-[40px] py-[5px] font-bold"
                    onClick={() => purchase(twentyBondTotal, 20)}
                    disabled={!web3Provider}
                  >
                    Purchase
                  </GraButton>
                </div>
              </div>

              <div className="">
                <BondCards
                  bondList={bondList}
                  tenBondTotal={tenBondTotal}
                  tenBondPrice={tenBondPrice}
                  twentyBondTotal={twentyBondTotal}
                  twentyBondPrice={twentyBondPrice}
                />
              </div>
            </div>
          </div>
        </div>
      </div>{" "}
      {/* Claim */}
      <Dialog
        onClose={handleClose}
        open={openBondSuccess}
        aria-labelledby="alert-dialog-title"
        aria-describedby="alert-dialog-description"
        sx={{ backdropFilter: "blur(5px)" }}
        maxWidth="xs"
      >
        <DialogTitle
          sx={{
            display: "flex",
            justifyContent: "center",
            color: "green",
            bgcolor: "#caffdb",
          }}
        >
          Successfully bonded
        </DialogTitle>
        <DialogContent
          sx={{
            display: "block",
            bgcolor: "#caffdb",
          }}
        >
          <div className="justify-center flex">
            <TextField
              label="Claim in:"
              id="outlined-start-adornment"
              sx={{ m: 1, width: "25ch" }}
              defaultValue="12 Hours"
              InputProps={{
                readOnly: true,
                startAdornment: (
                  <InputAdornment position="start">YZ</InputAdornment>
                ),
              }}
            />
          </div>

          <DialogContentText
            id="alert-dialog-description"
            sx={{
              display: "flex",
              justifyContent: "center",
              color: "green",
              textAlign: "center",
            }}
          >
            Your withdrawable bonding rewards will be updated and claimable in
            every 6 hours!
          </DialogContentText>
        </DialogContent>
        <DialogActions
          sx={{
            display: "flex",
            justifyContent: "center",
            bgcolor: "#caffdb",
          }}
        >
          <Button onClick={handleClose} sx={{ color: "green" }}>
            Confirm
          </Button>
        </DialogActions>
      </Dialog>
    </>
  );
};

export default Bonded;
